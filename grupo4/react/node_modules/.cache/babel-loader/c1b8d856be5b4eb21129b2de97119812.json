{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Enrique Niebles\\\\Documents\\\\Misi\\xF3n TIC 2021\\\\Ciclo 3 - Desarrollo Software\\\\Grupo-4\\\\grupo4\\\\react\\\\src\\\\components\\\\login\\\\ProtectedRoute.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport auth from \"./auth\";\nimport useAuthContext from './useAuthContext';\nimport { UNAUTHORIZED } from \"../../path\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProtectedRoute = props => {\n  _s();\n\n  const {\n    isAuthenticated,\n    isAdminAuthenticated\n  } = useAuthContext();\n  const {\n    path\n  } = props;\n\n  if (!isAuthenticated && !isAdminAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: UNAUTHORIZED\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  } else if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Route, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  } else if (isAdminAuthenticated && !isAuthenticated) {\n    if (path.includes('admin')) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Route, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  }\n\n  return null;\n};\n\n_s(ProtectedRoute, \"d7/IwKaBm8JmG7dB56g3bT1mjMw=\", false, function () {\n  return [useAuthContext];\n});\n\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n/* \r\nconst ProtectedRouteS = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => {\r\n                if (auth.isAuthenticated()) {                                   \r\n                    return <Component {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/unauthorized\",\r\n                                state: {\r\n                                from: props.location\r\n                                }\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["C:/Users/Enrique Niebles/Documents/MisiÃ³n TIC 2021/Ciclo 3 - Desarrollo Software/Grupo-4/grupo4/react/src/components/login/ProtectedRoute.js"],"names":["React","Route","Redirect","auth","useAuthContext","UNAUTHORIZED","ProtectedRoute","props","isAuthenticated","isAdminAuthenticated","path","includes"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,YAA7B;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAE9B,QAAM;AAACC,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,MAA0CL,cAAc,EAA9D;AACA,QAAM;AAACM,IAAAA;AAAD,MAASH,KAAf;;AAEA,MAAI,CAACC,eAAD,IAAoB,CAACC,oBAAzB,EAA+C;AAC3C,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAEJ;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAIG,eAAJ,EAAqB;AACxB,wBAAO,QAAC,KAAD,OAAWD;AAAX;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA,IAAIE,oBAAoB,IAAI,CAACD,eAA7B,EAA8C;AACjD,QAAIE,IAAI,CAACC,QAAL,CAAc,OAAd,CAAJ,EAA4B;AACxB,aAAO,IAAP;AACH;;AACD,wBAAO,QAAC,KAAD,OAAWJ;AAAX;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,SAAO,IAAP;AACH,CAjBD;;GAAMD,c;UAE8CF,c;;;KAF9CE,c;AAmBN,eAAeA,cAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport auth from \"./auth\";\r\nimport useAuthContext from './useAuthContext';\r\nimport { UNAUTHORIZED } from \"../../path\";\r\n\r\nconst ProtectedRoute = (props) => {\r\n\r\n    const {isAuthenticated, isAdminAuthenticated} = useAuthContext();\r\n    const {path} = props;\r\n\r\n    if (!isAuthenticated && !isAdminAuthenticated) {\r\n        return <Redirect to={UNAUTHORIZED} />;\r\n    } else if (isAuthenticated) {\r\n        return <Route {...props} />\r\n    } else if (isAdminAuthenticated && !isAuthenticated) {\r\n        if (path.includes('admin')) {\r\n            return null;\r\n        }\r\n        return <Route {...props} />        \r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default ProtectedRoute;\r\n\r\n\r\n/* \r\nconst ProtectedRouteS = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => {\r\n                if (auth.isAuthenticated()) {                                   \r\n                    return <Component {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/unauthorized\",\r\n                                state: {\r\n                                from: props.location\r\n                                }\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\n*/"]},"metadata":{},"sourceType":"module"}